// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: maps.sql

package dao

import (
	"context"
	"database/sql"
)

const countChangedMapsInUpdate = `-- name: CountChangedMapsInUpdate :one
SELECT COUNT(*)
FROM ` + "`" + `maps_history` + "`" + `
WHERE ` + "`" + `update` + "`" + ` = ?
`

func (q *Queries) CountChangedMapsInUpdate(ctx context.Context, update string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countChangedMapsInUpdate, update)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countMaps = `-- name: CountMaps :one
SELECT COUNT(*)
FROM ` + "`" + `maps` + "`" + `
INNER JOIN ` + "`" + `maps_history` + "`" + ` ON ` + "`" + `maps` + "`" + `.` + "`" + `latest_history_id` + "`" + ` = ` + "`" + `maps_history` + "`" + `.` + "`" + `history_id` + "`" + `
WHERE ` + "`" + `maps` + "`" + `.` + "`" + `deleted` + "`" + ` = FALSE
`

func (q *Queries) CountMaps(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMaps)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getChangedMaps = `-- name: GetChangedMaps :many
SELECT current.history_id, current.previous_history_id, current.map_id, current.file_version, current.` + "`" + `update` + "`" + `, current.name, current.special_code, current.mp3_name, current.npcs, current.warps, current.spawns, current.created_at, previous.history_id, previous.previous_history_id, previous.map_id, previous.file_version, previous.` + "`" + `update` + "`" + `, previous.name, previous.special_code, previous.mp3_name, previous.npcs, previous.warps, previous.spawns, previous.created_at, latest.update lastUpdate
FROM ` + "`" + `maps_history` + "`" + ` current
LEFT JOIN ` + "`" + `previous_map_history_vw` + "`" + ` previous ON ` + "`" + `previous` + "`" + `.` + "`" + `history_id` + "`" + ` = ` + "`" + `current` + "`" + `.` + "`" + `previous_history_id` + "`" + `
LEFT JOIN ` + "`" + `maps` + "`" + ` latest_id ON ` + "`" + `latest_id` + "`" + `.` + "`" + `map_id` + "`" + ` = ` + "`" + `current` + "`" + `.` + "`" + `map_id` + "`" + `
LEFT JOIN ` + "`" + `maps_history` + "`" + ` latest ON ` + "`" + `latest_id` + "`" + `.` + "`" + `latest_history_id` + "`" + ` = ` + "`" + `latest` + "`" + `.` + "`" + `history_id` + "`" + `
WHERE ` + "`" + `current` + "`" + `.` + "`" + `update` + "`" + ` = ?
ORDER BY ` + "`" + `current` + "`" + `.` + "`" + `history_id` + "`" + `
LIMIT ?, ?
`

type GetChangedMapsParams struct {
	Update string
	Offset int32
	Limit  int32
}

type GetChangedMapsRow struct {
	MapsHistory          MapsHistory
	PreviousMapHistoryVw PreviousMapHistoryVw
	Lastupdate           sql.NullString
}

func (q *Queries) GetChangedMaps(ctx context.Context, arg GetChangedMapsParams) ([]GetChangedMapsRow, error) {
	rows, err := q.db.QueryContext(ctx, getChangedMaps, arg.Update, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChangedMapsRow
	for rows.Next() {
		var i GetChangedMapsRow
		if err := rows.Scan(
			&i.MapsHistory.HistoryID,
			&i.MapsHistory.PreviousHistoryID,
			&i.MapsHistory.MapID,
			&i.MapsHistory.FileVersion,
			&i.MapsHistory.Update,
			&i.MapsHistory.Name,
			&i.MapsHistory.SpecialCode,
			&i.MapsHistory.Mp3Name,
			&i.MapsHistory.Npcs,
			&i.MapsHistory.Warps,
			&i.MapsHistory.Spawns,
			&i.MapsHistory.CreatedAt,
			&i.PreviousMapHistoryVw.HistoryID,
			&i.PreviousMapHistoryVw.PreviousHistoryID,
			&i.PreviousMapHistoryVw.MapID,
			&i.PreviousMapHistoryVw.FileVersion,
			&i.PreviousMapHistoryVw.Update,
			&i.PreviousMapHistoryVw.Name,
			&i.PreviousMapHistoryVw.SpecialCode,
			&i.PreviousMapHistoryVw.Mp3Name,
			&i.PreviousMapHistoryVw.Npcs,
			&i.PreviousMapHistoryVw.Warps,
			&i.PreviousMapHistoryVw.Spawns,
			&i.PreviousMapHistoryVw.CreatedAt,
			&i.Lastupdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrentMaps = `-- name: GetCurrentMaps :many
SELECT maps_history.history_id, maps_history.previous_history_id, maps_history.map_id, maps_history.file_version, maps_history.` + "`" + `update` + "`" + `, maps_history.name, maps_history.special_code, maps_history.mp3_name, maps_history.npcs, maps_history.warps, maps_history.spawns, maps_history.created_at, ` + "`" + `maps` + "`" + `.` + "`" + `deleted` + "`" + `
FROM ` + "`" + `maps` + "`" + `
INNER JOIN ` + "`" + `maps_history` + "`" + ` ON ` + "`" + `maps_history` + "`" + `.` + "`" + `history_id` + "`" + ` = ` + "`" + `maps` + "`" + `.` + "`" + `latest_history_id` + "`" + `
`

type GetCurrentMapsRow struct {
	HistoryID         int32
	PreviousHistoryID sql.NullInt32
	MapID             string
	FileVersion       int32
	Update            string
	Name              sql.NullString
	SpecialCode       sql.NullInt32
	Mp3Name           sql.NullString
	Npcs              []byte
	Warps             []byte
	Spawns            []byte
	CreatedAt         sql.NullTime
	Deleted           bool
}

func (q *Queries) GetCurrentMaps(ctx context.Context) ([]GetCurrentMapsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCurrentMaps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCurrentMapsRow
	for rows.Next() {
		var i GetCurrentMapsRow
		if err := rows.Scan(
			&i.HistoryID,
			&i.PreviousHistoryID,
			&i.MapID,
			&i.FileVersion,
			&i.Update,
			&i.Name,
			&i.SpecialCode,
			&i.Mp3Name,
			&i.Npcs,
			&i.Warps,
			&i.Spawns,
			&i.CreatedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapHistory = `-- name: GetMapHistory :many
SELECT current.history_id, current.previous_history_id, current.map_id, current.file_version, current.` + "`" + `update` + "`" + `, current.name, current.special_code, current.mp3_name, current.npcs, current.warps, current.spawns, current.created_at, previous.history_id, previous.previous_history_id, previous.map_id, previous.file_version, previous.` + "`" + `update` + "`" + `, previous.name, previous.special_code, previous.mp3_name, previous.npcs, previous.warps, previous.spawns, previous.created_at
FROM ` + "`" + `maps_history` + "`" + ` current
LEFT JOIN ` + "`" + `previous_map_history_vw` + "`" + ` previous ON ` + "`" + `previous` + "`" + `.` + "`" + `history_id` + "`" + ` = ` + "`" + `current` + "`" + `.` + "`" + `previous_history_id` + "`" + `
WHERE ` + "`" + `current` + "`" + `.` + "`" + `map_id` + "`" + ` = ?
ORDER BY ` + "`" + `current` + "`" + `.` + "`" + `history_id` + "`" + ` ASC
LIMIT ?, ?
`

type GetMapHistoryParams struct {
	MapID  string
	Offset int32
	Limit  int32
}

type GetMapHistoryRow struct {
	MapsHistory          MapsHistory
	PreviousMapHistoryVw PreviousMapHistoryVw
}

func (q *Queries) GetMapHistory(ctx context.Context, arg GetMapHistoryParams) ([]GetMapHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getMapHistory, arg.MapID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMapHistoryRow
	for rows.Next() {
		var i GetMapHistoryRow
		if err := rows.Scan(
			&i.MapsHistory.HistoryID,
			&i.MapsHistory.PreviousHistoryID,
			&i.MapsHistory.MapID,
			&i.MapsHistory.FileVersion,
			&i.MapsHistory.Update,
			&i.MapsHistory.Name,
			&i.MapsHistory.SpecialCode,
			&i.MapsHistory.Mp3Name,
			&i.MapsHistory.Npcs,
			&i.MapsHistory.Warps,
			&i.MapsHistory.Spawns,
			&i.MapsHistory.CreatedAt,
			&i.PreviousMapHistoryVw.HistoryID,
			&i.PreviousMapHistoryVw.PreviousHistoryID,
			&i.PreviousMapHistoryVw.MapID,
			&i.PreviousMapHistoryVw.FileVersion,
			&i.PreviousMapHistoryVw.Update,
			&i.PreviousMapHistoryVw.Name,
			&i.PreviousMapHistoryVw.SpecialCode,
			&i.PreviousMapHistoryVw.Mp3Name,
			&i.PreviousMapHistoryVw.Npcs,
			&i.PreviousMapHistoryVw.Warps,
			&i.PreviousMapHistoryVw.Spawns,
			&i.PreviousMapHistoryVw.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapList = `-- name: GetMapList :many
SELECT ` + "`" + `maps_history` + "`" + `.` + "`" + `map_id` + "`" + `, ` + "`" + `maps_history` + "`" + `.` + "`" + `name` + "`" + `, ` + "`" + `maps_history` + "`" + `.` + "`" + `update` + "`" + ` lastUpdate
FROM ` + "`" + `maps` + "`" + `
INNER JOIN ` + "`" + `maps_history` + "`" + ` ON ` + "`" + `maps_history` + "`" + `.` + "`" + `history_id` + "`" + ` = ` + "`" + `maps` + "`" + `.` + "`" + `latest_history_id` + "`" + `
WHERE ` + "`" + `maps` + "`" + `.` + "`" + `deleted` + "`" + ` = FALSE
ORDER BY ` + "`" + `maps_history` + "`" + `.` + "`" + `map_id` + "`" + ` ASC
LIMIT ?, ?
`

type GetMapListParams struct {
	Offset int32
	Limit  int32
}

type GetMapListRow struct {
	MapID      string
	Name       sql.NullString
	Lastupdate string
}

func (q *Queries) GetMapList(ctx context.Context, arg GetMapListParams) ([]GetMapListRow, error) {
	rows, err := q.db.QueryContext(ctx, getMapList, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMapListRow
	for rows.Next() {
		var i GetMapListRow
		if err := rows.Scan(&i.MapID, &i.Name, &i.Lastupdate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapsIdsInUpdate = `-- name: GetMapsIdsInUpdate :many
SELECT ` + "`" + `maps_history` + "`" + `.` + "`" + `history_id` + "`" + `, ` + "`" + `maps_history` + "`" + `.` + "`" + `map_id` + "`" + `
FROM ` + "`" + `maps_history` + "`" + `
WHERE ` + "`" + `maps_history` + "`" + `.` + "`" + `update` + "`" + ` = ?
`

type GetMapsIdsInUpdateRow struct {
	HistoryID int32
	MapID     string
}

func (q *Queries) GetMapsIdsInUpdate(ctx context.Context, update string) ([]GetMapsIdsInUpdateRow, error) {
	rows, err := q.db.QueryContext(ctx, getMapsIdsInUpdate, update)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMapsIdsInUpdateRow
	for rows.Next() {
		var i GetMapsIdsInUpdateRow
		if err := rows.Scan(&i.HistoryID, &i.MapID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertMap = `-- name: UpsertMap :execresult
INSERT INTO ` + "`" + `maps` + "`" + ` (` + "`" + `map_id` + "`" + `, ` + "`" + `latest_history_id` + "`" + `, ` + "`" + `deleted` + "`" + `)
VALUES (?, ?, ?)
ON DUPLICATE KEY UPDATE
	latest_history_id = VALUES(latest_history_id),
	deleted = VALUES(deleted)
`

type UpsertMapParams struct {
	MapID           string
	LatestHistoryID int32
	Deleted         bool
}

func (q *Queries) UpsertMap(ctx context.Context, arg UpsertMapParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, upsertMap, arg.MapID, arg.LatestHistoryID, arg.Deleted)
}
