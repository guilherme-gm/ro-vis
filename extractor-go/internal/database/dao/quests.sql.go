// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quests.sql

package dao

import (
	"context"
	"database/sql"
)

const insertQuestHistory = `-- name: InsertQuestHistory :execresult
INSERT INTO ` + "`" + `quest_history` + "`" + ` (
	` + "`" + `previous_history_id` + "`" + `, -- 1
	` + "`" + `quest_id` + "`" + `, -- 2
	` + "`" + `file_version` + "`" + `, -- 3
	` + "`" + `patch` + "`" + `, -- 4
	` + "`" + `title` + "`" + `, -- 5
	` + "`" + `description` + "`" + `, -- 6
	` + "`" + `summary` + "`" + `, -- 7
	` + "`" + `old_image` + "`" + `, -- 8
	` + "`" + `icon_name` + "`" + `, -- 9
	` + "`" + `npc_spr` + "`" + `, -- 10
	` + "`" + `npc_navi` + "`" + `, -- 11
	` + "`" + `npc_pos_x` + "`" + `, -- 12
	` + "`" + `npc_pos_y` + "`" + `, -- 13
	` + "`" + `reward_exp` + "`" + `, -- 14
	` + "`" + `reward_jexp` + "`" + `, -- 15
	` + "`" + `reward_item_list` + "`" + `, -- 16
	` + "`" + `cool_time_quest` + "`" + ` -- 17
)
VALUES (
	?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type InsertQuestHistoryParams struct {
	PreviousHistoryID sql.NullInt32
	QuestID           int32
	FileVersion       int32
	Patch             string
	Title             sql.NullString
	Description       sql.NullString
	Summary           sql.NullString
	OldImage          sql.NullString
	IconName          sql.NullString
	NpcSpr            sql.NullString
	NpcNavi           sql.NullString
	NpcPosX           sql.NullInt32
	NpcPosY           sql.NullInt32
	RewardExp         sql.NullString
	RewardJexp        sql.NullString
	RewardItemList    sql.NullString
	CoolTimeQuest     sql.NullInt32
}

func (q *Queries) InsertQuestHistory(ctx context.Context, arg InsertQuestHistoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertQuestHistory,
		arg.PreviousHistoryID,
		arg.QuestID,
		arg.FileVersion,
		arg.Patch,
		arg.Title,
		arg.Description,
		arg.Summary,
		arg.OldImage,
		arg.IconName,
		arg.NpcSpr,
		arg.NpcNavi,
		arg.NpcPosX,
		arg.NpcPosY,
		arg.RewardExp,
		arg.RewardJexp,
		arg.RewardItemList,
		arg.CoolTimeQuest,
	)
}

const upsertQuest = `-- name: UpsertQuest :execresult
INSERT INTO ` + "`" + `quests` + "`" + ` (
	` + "`" + `quest_id` + "`" + `, -- 1
	` + "`" + `latest_history_id` + "`" + `, -- 2
	` + "`" + `deleted` + "`" + ` -- 3
)
VALUES (
	?, ?, ?
)
ON DUPLICATE KEY UPDATE
	latest_history_id = VALUES(latest_history_id),
	deleted = VALUES(deleted)
`

type UpsertQuestParams struct {
	QuestID         int32
	LatestHistoryID int32
	Deleted         bool
}

func (q *Queries) UpsertQuest(ctx context.Context, arg UpsertQuestParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, upsertQuest, arg.QuestID, arg.LatestHistoryID, arg.Deleted)
}
