// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: items.sql

package dao

import (
	"context"
	"database/sql"
)

const getCurrentItems = `-- name: GetCurrentItems :many
SELECT item_history.history_id, item_history.previous_history_id, item_history.item_id, item_history.file_version, item_history.` + "`" + `update` + "`" + `, item_history.identified_name, item_history.identified_description, item_history.identified_sprite, item_history.unidentified_name, item_history.unidentified_description, item_history.unidentified_sprite, item_history.slot_count, item_history.is_book, item_history.can_use_buying_store, item_history.card_prefix, item_history.card_is_postfix, item_history.card_illustration, item_history.class_num, item_history.is_costume, item_history.effect_id, item_history.package_id, item_history.move_info, ` + "`" + `items` + "`" + `.` + "`" + `deleted` + "`" + `
FROM ` + "`" + `items` + "`" + `
INNER JOIN ` + "`" + `item_history` + "`" + ` ON ` + "`" + `items` + "`" + `.` + "`" + `latest_history_id` + "`" + ` = ` + "`" + `item_history` + "`" + `.` + "`" + `history_id` + "`" + `
`

type GetCurrentItemsRow struct {
	HistoryID               int32
	PreviousHistoryID       sql.NullInt32
	ItemID                  int32
	FileVersion             int32
	Update                  string
	IdentifiedName          sql.NullString
	IdentifiedDescription   sql.NullString
	IdentifiedSprite        sql.NullString
	UnidentifiedName        sql.NullString
	UnidentifiedDescription sql.NullString
	UnidentifiedSprite      sql.NullString
	SlotCount               int8
	IsBook                  bool
	CanUseBuyingStore       bool
	CardPrefix              sql.NullString
	CardIsPostfix           bool
	CardIllustration        sql.NullString
	ClassNum                sql.NullInt32
	IsCostume               bool
	EffectID                int32
	PackageID               int32
	MoveInfo                []byte
	Deleted                 bool
}

func (q *Queries) GetCurrentItems(ctx context.Context) ([]GetCurrentItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCurrentItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCurrentItemsRow
	for rows.Next() {
		var i GetCurrentItemsRow
		if err := rows.Scan(
			&i.HistoryID,
			&i.PreviousHistoryID,
			&i.ItemID,
			&i.FileVersion,
			&i.Update,
			&i.IdentifiedName,
			&i.IdentifiedDescription,
			&i.IdentifiedSprite,
			&i.UnidentifiedName,
			&i.UnidentifiedDescription,
			&i.UnidentifiedSprite,
			&i.SlotCount,
			&i.IsBook,
			&i.CanUseBuyingStore,
			&i.CardPrefix,
			&i.CardIsPostfix,
			&i.CardIllustration,
			&i.ClassNum,
			&i.IsCostume,
			&i.EffectID,
			&i.PackageID,
			&i.MoveInfo,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemIdsInUpdate = `-- name: GetItemIdsInUpdate :many
SELECT ` + "`" + `item_history` + "`" + `.` + "`" + `history_id` + "`" + `, ` + "`" + `item_history` + "`" + `.` + "`" + `item_id` + "`" + `
FROM ` + "`" + `item_history` + "`" + `
WHERE ` + "`" + `item_history` + "`" + `.` + "`" + `update` + "`" + ` = ?
`

type GetItemIdsInUpdateRow struct {
	HistoryID int32
	ItemID    int32
}

func (q *Queries) GetItemIdsInUpdate(ctx context.Context, update string) ([]GetItemIdsInUpdateRow, error) {
	rows, err := q.db.QueryContext(ctx, getItemIdsInUpdate, update)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemIdsInUpdateRow
	for rows.Next() {
		var i GetItemIdsInUpdateRow
		if err := rows.Scan(&i.HistoryID, &i.ItemID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertItem = `-- name: UpsertItem :execresult
INSERT INTO ` + "`" + `items` + "`" + ` (` + "`" + `item_id` + "`" + `, ` + "`" + `latest_history_id` + "`" + `, ` + "`" + `deleted` + "`" + `)
VALUES (?, ?, ?)
ON DUPLICATE KEY UPDATE
	latest_history_id = VALUES(latest_history_id),
	deleted = VALUES(deleted)
`

type UpsertItemParams struct {
	ItemID          int32
	LatestHistoryID int32
	Deleted         bool
}

func (q *Queries) UpsertItem(ctx context.Context, arg UpsertItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, upsertItem, arg.ItemID, arg.LatestHistoryID, arg.Deleted)
}
