// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: loader-controller.sql

package dao

import (
	"context"
)

const getLatestPatch = `-- name: GetLatestPatch :one
SELECT ` + "`" + `latest_patch_id` + "`" + ` FROM ` + "`" + `loader_controller` + "`" + ` WHERE ` + "`" + `name` + "`" + ` = ?
`

func (q *Queries) GetLatestPatch(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getLatestPatch, name)
	var latest_patch_id int32
	err := row.Scan(&latest_patch_id)
	return latest_patch_id, err
}

const upsertLatestPatch = `-- name: UpsertLatestPatch :exec
INSERT INTO ` + "`" + `loader_controller` + "`" + ` (` + "`" + `name` + "`" + `, ` + "`" + `latest_patch_id` + "`" + `, ` + "`" + `latest_patch_name` + "`" + `)
VALUES (?, ?, ?)
ON DUPLICATE KEY UPDATE
	latest_patch_id = VALUES(latest_patch_id),
	latest_patch_name = VALUES(latest_patch_name)
`

type UpsertLatestPatchParams struct {
	Name            string
	LatestPatchID   int32
	LatestPatchName string
}

func (q *Queries) UpsertLatestPatch(ctx context.Context, arg UpsertLatestPatchParams) error {
	_, err := q.db.ExecContext(ctx, upsertLatestPatch, arg.Name, arg.LatestPatchID, arg.LatestPatchName)
	return err
}
