// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: loader-controller.sql

package dao

import (
	"context"
	"time"
)

const getLatestUpdate = `-- name: GetLatestUpdate :one
SELECT ` + "`" + `last_update_date` + "`" + ` FROM ` + "`" + `loader_controller` + "`" + ` WHERE ` + "`" + `name` + "`" + ` = ?
`

func (q *Queries) GetLatestUpdate(ctx context.Context, name string) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getLatestUpdate, name)
	var last_update_date time.Time
	err := row.Scan(&last_update_date)
	return last_update_date, err
}

const upsertLatestUpdate = `-- name: UpsertLatestUpdate :exec
INSERT INTO ` + "`" + `loader_controller` + "`" + ` (` + "`" + `name` + "`" + `, ` + "`" + `last_update_date` + "`" + `)
VALUES (?, ?)
ON DUPLICATE KEY UPDATE
	last_update_date = VALUES(last_update_date)
`

type UpsertLatestUpdateParams struct {
	Name           string
	LastUpdateDate time.Time
}

func (q *Queries) UpsertLatestUpdate(ctx context.Context, arg UpsertLatestUpdateParams) error {
	_, err := q.db.ExecContext(ctx, upsertLatestUpdate, arg.Name, arg.LastUpdateDate)
	return err
}
