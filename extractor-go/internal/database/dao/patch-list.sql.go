// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: patch-list.sql

package dao

import (
	"context"
	"encoding/json"
	"time"
)

const insertPatch = `-- name: InsertPatch :exec
INSERT INTO ` + "`" + `patches` + "`" + ` (` + "`" + `name` + "`" + `, ` + "`" + `date` + "`" + `, ` + "`" + `files` + "`" + `) VALUES (?, ?, ?)
`

type InsertPatchParams struct {
	Name  string
	Date  time.Time
	Files json.RawMessage
}

func (q *Queries) InsertPatch(ctx context.Context, arg InsertPatchParams) error {
	_, err := q.db.ExecContext(ctx, insertPatch, arg.Name, arg.Date, arg.Files)
	return err
}

const listPatches = `-- name: ListPatches :many
SELECT id, name, date, files FROM ` + "`" + `patches` + "`" + `
`

func (q *Queries) ListPatches(ctx context.Context) ([]Patch, error) {
	rows, err := q.db.QueryContext(ctx, listPatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patch
	for rows.Next() {
		var i Patch
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.Files,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
