// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: i18n.sql

package dao

import (
	"context"
	"database/sql"
)

const countChangedI18nsInUpdate = `-- name: CountChangedI18nsInUpdate :one
SELECT COUNT(*)
FROM ` + "`" + `i18n_history` + "`" + `
WHERE ` + "`" + `update` + "`" + ` = ?
`

func (q *Queries) CountChangedI18nsInUpdate(ctx context.Context, update string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countChangedI18nsInUpdate, update)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countI18ns = `-- name: CountI18ns :one
SELECT COUNT(*)
FROM ` + "`" + `i18ns` + "`" + `
INNER JOIN ` + "`" + `i18n_history` + "`" + ` ON ` + "`" + `i18n_history` + "`" + `.` + "`" + `history_id` + "`" + ` = ` + "`" + `i18ns` + "`" + `.` + "`" + `latest_history_id` + "`" + `
WHERE ` + "`" + `i18ns` + "`" + `.` + "`" + `deleted` + "`" + ` = FALSE
`

func (q *Queries) CountI18ns(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countI18ns)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getChangedI18ns = `-- name: GetChangedI18ns :many
SELECT current.history_id, current.previous_history_id, current.i18n_id, current.file_version, current.` + "`" + `update` + "`" + `, current.container_file, current.en_text, current.pt_br_text, current.active, previous.history_id, previous.previous_history_id, previous.i18n_id, previous.file_version, previous.` + "`" + `update` + "`" + `, previous.container_file, previous.en_text, previous.pt_br_text, previous.active, latest.update lastUpdate
FROM ` + "`" + `i18n_history` + "`" + ` current
LEFT JOIN ` + "`" + `previous_i18n_history_vw` + "`" + ` previous ON ` + "`" + `previous` + "`" + `.` + "`" + `history_id` + "`" + ` = ` + "`" + `current` + "`" + `.` + "`" + `previous_history_id` + "`" + `
LEFT JOIN ` + "`" + `i18ns` + "`" + ` latest_id ON ` + "`" + `latest_id` + "`" + `.` + "`" + `i18n_id` + "`" + ` = ` + "`" + `current` + "`" + `.` + "`" + `i18n_id` + "`" + `
LEFT JOIN ` + "`" + `i18n_history` + "`" + ` latest ON ` + "`" + `latest_id` + "`" + `.` + "`" + `latest_history_id` + "`" + ` = ` + "`" + `latest` + "`" + `.` + "`" + `history_id` + "`" + `
WHERE ` + "`" + `current` + "`" + `.` + "`" + `update` + "`" + ` = ?
ORDER BY ` + "`" + `current` + "`" + `.` + "`" + `history_id` + "`" + `
LIMIT ?, ?
`

type GetChangedI18nsParams struct {
	Update string
	Offset int32
	Limit  int32
}

type GetChangedI18nsRow struct {
	I18nHistory           I18nHistory
	PreviousI18nHistoryVw PreviousI18nHistoryVw
	Lastupdate            sql.NullString
}

func (q *Queries) GetChangedI18ns(ctx context.Context, arg GetChangedI18nsParams) ([]GetChangedI18nsRow, error) {
	rows, err := q.db.QueryContext(ctx, getChangedI18ns, arg.Update, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChangedI18nsRow
	for rows.Next() {
		var i GetChangedI18nsRow
		if err := rows.Scan(
			&i.I18nHistory.HistoryID,
			&i.I18nHistory.PreviousHistoryID,
			&i.I18nHistory.I18nID,
			&i.I18nHistory.FileVersion,
			&i.I18nHistory.Update,
			&i.I18nHistory.ContainerFile,
			&i.I18nHistory.EnText,
			&i.I18nHistory.PtBrText,
			&i.I18nHistory.Active,
			&i.PreviousI18nHistoryVw.HistoryID,
			&i.PreviousI18nHistoryVw.PreviousHistoryID,
			&i.PreviousI18nHistoryVw.I18nID,
			&i.PreviousI18nHistoryVw.FileVersion,
			&i.PreviousI18nHistoryVw.Update,
			&i.PreviousI18nHistoryVw.ContainerFile,
			&i.PreviousI18nHistoryVw.EnText,
			&i.PreviousI18nHistoryVw.PtBrText,
			&i.PreviousI18nHistoryVw.Active,
			&i.Lastupdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrentI18ns = `-- name: GetCurrentI18ns :many
SELECT i18n_history.history_id, i18n_history.previous_history_id, i18n_history.i18n_id, i18n_history.file_version, i18n_history.` + "`" + `update` + "`" + `, i18n_history.container_file, i18n_history.en_text, i18n_history.pt_br_text, i18n_history.active, ` + "`" + `i18ns` + "`" + `.` + "`" + `deleted` + "`" + `
FROM ` + "`" + `i18ns` + "`" + `
INNER JOIN ` + "`" + `i18n_history` + "`" + ` ON ` + "`" + `i18ns` + "`" + `.` + "`" + `latest_history_id` + "`" + ` = ` + "`" + `i18n_history` + "`" + `.` + "`" + `history_id` + "`" + `
`

type GetCurrentI18nsRow struct {
	HistoryID         int64
	PreviousHistoryID sql.NullInt64
	I18nID            uint64
	FileVersion       int32
	Update            string
	ContainerFile     string
	EnText            string
	PtBrText          string
	Active            bool
	Deleted           bool
}

func (q *Queries) GetCurrentI18ns(ctx context.Context) ([]GetCurrentI18nsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCurrentI18ns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCurrentI18nsRow
	for rows.Next() {
		var i GetCurrentI18nsRow
		if err := rows.Scan(
			&i.HistoryID,
			&i.PreviousHistoryID,
			&i.I18nID,
			&i.FileVersion,
			&i.Update,
			&i.ContainerFile,
			&i.EnText,
			&i.PtBrText,
			&i.Active,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getI18nHistory = `-- name: GetI18nHistory :many
SELECT current.history_id, current.previous_history_id, current.i18n_id, current.file_version, current.` + "`" + `update` + "`" + `, current.container_file, current.en_text, current.pt_br_text, current.active, previous.history_id, previous.previous_history_id, previous.i18n_id, previous.file_version, previous.` + "`" + `update` + "`" + `, previous.container_file, previous.en_text, previous.pt_br_text, previous.active
FROM ` + "`" + `i18n_history` + "`" + ` current
LEFT JOIN ` + "`" + `previous_i18n_history_vw` + "`" + ` previous ON ` + "`" + `previous` + "`" + `.` + "`" + `history_id` + "`" + ` = ` + "`" + `current` + "`" + `.` + "`" + `previous_history_id` + "`" + `
WHERE ` + "`" + `current` + "`" + `.` + "`" + `i18n_id` + "`" + ` = ?
ORDER BY ` + "`" + `current` + "`" + `.` + "`" + `history_id` + "`" + ` ASC
LIMIT ?, ?
`

type GetI18nHistoryParams struct {
	I18nID uint64
	Offset int32
	Limit  int32
}

type GetI18nHistoryRow struct {
	I18nHistory           I18nHistory
	PreviousI18nHistoryVw PreviousI18nHistoryVw
}

func (q *Queries) GetI18nHistory(ctx context.Context, arg GetI18nHistoryParams) ([]GetI18nHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getI18nHistory, arg.I18nID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetI18nHistoryRow
	for rows.Next() {
		var i GetI18nHistoryRow
		if err := rows.Scan(
			&i.I18nHistory.HistoryID,
			&i.I18nHistory.PreviousHistoryID,
			&i.I18nHistory.I18nID,
			&i.I18nHistory.FileVersion,
			&i.I18nHistory.Update,
			&i.I18nHistory.ContainerFile,
			&i.I18nHistory.EnText,
			&i.I18nHistory.PtBrText,
			&i.I18nHistory.Active,
			&i.PreviousI18nHistoryVw.HistoryID,
			&i.PreviousI18nHistoryVw.PreviousHistoryID,
			&i.PreviousI18nHistoryVw.I18nID,
			&i.PreviousI18nHistoryVw.FileVersion,
			&i.PreviousI18nHistoryVw.Update,
			&i.PreviousI18nHistoryVw.ContainerFile,
			&i.PreviousI18nHistoryVw.EnText,
			&i.PreviousI18nHistoryVw.PtBrText,
			&i.PreviousI18nHistoryVw.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getI18nList = `-- name: GetI18nList :many
SELECT ` + "`" + `i18n_history` + "`" + `.` + "`" + `i18n_id` + "`" + `, ` + "`" + `i18n_history` + "`" + `.` + "`" + `pt_br_text` + "`" + `, ` + "`" + `i18n_history` + "`" + `.` + "`" + `update` + "`" + ` lastUpdate
FROM ` + "`" + `i18ns` + "`" + `
INNER JOIN ` + "`" + `i18n_history` + "`" + ` ON ` + "`" + `i18n_history` + "`" + `.` + "`" + `history_id` + "`" + ` = ` + "`" + `i18ns` + "`" + `.` + "`" + `latest_history_id` + "`" + `
WHERE ` + "`" + `i18ns` + "`" + `.` + "`" + `deleted` + "`" + ` = FALSE
ORDER BY ` + "`" + `i18n_history` + "`" + `.` + "`" + `i18n_id` + "`" + ` ASC
LIMIT ?, ?
`

type GetI18nListParams struct {
	Offset int32
	Limit  int32
}

type GetI18nListRow struct {
	I18nID     uint64
	PtBrText   string
	Lastupdate string
}

func (q *Queries) GetI18nList(ctx context.Context, arg GetI18nListParams) ([]GetI18nListRow, error) {
	rows, err := q.db.QueryContext(ctx, getI18nList, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetI18nListRow
	for rows.Next() {
		var i GetI18nListRow
		if err := rows.Scan(&i.I18nID, &i.PtBrText, &i.Lastupdate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getI18nsIdsInUpdate = `-- name: GetI18nsIdsInUpdate :many
SELECT ` + "`" + `i18n_history` + "`" + `.` + "`" + `history_id` + "`" + `, ` + "`" + `i18n_history` + "`" + `.` + "`" + `i18n_id` + "`" + `
FROM ` + "`" + `i18n_history` + "`" + `
WHERE ` + "`" + `i18n_history` + "`" + `.` + "`" + `update` + "`" + ` = ?
`

type GetI18nsIdsInUpdateRow struct {
	HistoryID int64
	I18nID    uint64
}

func (q *Queries) GetI18nsIdsInUpdate(ctx context.Context, update string) ([]GetI18nsIdsInUpdateRow, error) {
	rows, err := q.db.QueryContext(ctx, getI18nsIdsInUpdate, update)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetI18nsIdsInUpdateRow
	for rows.Next() {
		var i GetI18nsIdsInUpdateRow
		if err := rows.Scan(&i.HistoryID, &i.I18nID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertI18n = `-- name: UpsertI18n :execresult
INSERT INTO ` + "`" + `i18ns` + "`" + ` (` + "`" + `i18n_id` + "`" + `, ` + "`" + `latest_history_id` + "`" + `, ` + "`" + `deleted` + "`" + `)
VALUES (?, ?, ?)
ON DUPLICATE KEY UPDATE
	latest_history_id = VALUES(latest_history_id),
	deleted = VALUES(deleted)
`

type UpsertI18nParams struct {
	I18nID          uint64
	LatestHistoryID int64
	Deleted         bool
}

func (q *Queries) UpsertI18n(ctx context.Context, arg UpsertI18nParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, upsertI18n, arg.I18nID, arg.LatestHistoryID, arg.Deleted)
}
